// Based on grammar from dlang.org commit 74c06ae222f27b9bcaf78e196a27abdc540b2fa7

token ByteOrderMark
    = "\uFEFF"
    ;
/*
Shebang
    = "#!" Characters? EndOfShebang
    ;
EndOfShebang
    = "\u000A"
    | EndOfFile
    ;
token Character
    = any Unicode character
    ;
token EndOfFile
    = physical end of the file
    | "\u0000"
    | "\u001A"
    ;
*/
token EndOfLine @ignoreToken
    = "\u000D"
    | "\u000A"
    | "\u000D" "\u000A"
    | "\u2028"
    | "\u2029"
//    | EndOfFile
    ;
token WhiteSpace @ignoreToken
    = Space
    | Space WhiteSpace
    ;
fragment Space
    = "\u0020"
    | "\u0009"
    | "\u000B"
    | "\u000C"
    ;
token Comment @ignoreToken
    = BlockComment
    | LineComment
    | NestingBlockComment
    ;
fragment WS
    = Space
    | Comment
    | WS Space
    | WS Comment
    ;
token BlockComment @ignoreToken
    = "/*" BlockCommentPart* "*"* "*/"
    ;
fragment BlockCommentPart
    = [^*]
    | "*"+ [^*/]
    ;
token LineComment @ignoreToken
    = "//" [^\n\r\u000D\u000A\u2028\u2029\0\x1a]* EndOfLine
    ;
token NestingBlockComment @ignoreToken
    = "/+" NestingBlockCommentPart* "+"* "+/" @recursiveLexer
    ;
fragment NestingBlockCommentPart
    = [^+/]
    | "+"+ [^+/]
    | "/"+ [^+/]
    | "/"* NestingBlockComment
    ;
/*Characters
    = Character
    | Character Characters
    ;*/
/*Token
    = "{"
    | "}"
    | TokenNoBraces
    ;*/
TokenNoBraces
    = TokenNoParens
    | "("
    | ")"
    | "["
    | "]"
    ;
TokenNoParens
    = Identifier
    | StringLiteral
    | CharacterLiteral
    | IntegerLiteral
    | FloatLiteral
    | Keyword
    | "/"
    | "/="
    | "."
    | ".."
    | "..."
    | "&"
    | "&="
    | "&&"
    | "|"
    | "|="
    | "||"
    | "-"
    | "-="
    | "--"
    | "+"
    | "+="
    | "++"
    | "<"
    | "<="
    | "<<"
    | "<<="
    | ">"
    | ">="
    | ">>="
    | ">>>="
    | ">>"
    | ">>>"
    | "!"
    | "!="
    | "?"
    | ","
    | ";"
    | ":"
    | "$"
    | "="
    | "=="
    | "*"
    | "*="
    | "%"
    | "%="
    | "^"
    | "^="
    | "^^"
    | "^^="
    | "~"
    | "~="
    | "@"
    | "=>"
    ;
token Identifier @lowPrio
    = IdentifierStart
    | IdentifierStart IdentifierChars
    ;
fragment IdentifierChars
    = IdentifierChar
    | IdentifierChar IdentifierChars
    ;
fragment IdentifierStart
    = "_"
    | Letter
    | UniversalAlpha
    ;
fragment IdentifierChar
    = IdentifierStart
    | "0"
    | NonZeroDigit
    ;
StringLiteral
    = WysiwygString
    | AlternateWysiwygString
    | DoubleQuotedString
    | DelimitedString
    | TokenString
    ;
token WysiwygString
    = "r\"" [^\"]* "\"" StringPostfix?
    ;
token AlternateWysiwygString
    = "`" [^`]* "`" StringPostfix?
    ;
token DoubleQuotedString
    = "\"" DoubleQuotedCharacters? "\"" StringPostfix?
    ;
fragment DoubleQuotedCharacters
    = @empty
    | DoubleQuotedCharacter DoubleQuotedCharacters
    ;
fragment DoubleQuotedCharacter
    = [^\"\\]
    | EscapeSequence
    | EndOfLine
    ;
token DelimitedString
    = "q\"" @store Identifier [\n\r]
        DelimitedStringLine*
        @compareTrue Identifier "\""
    | "q\"[" DelimitedStringNesting1* "]\""
    | "q\"(" DelimitedStringNesting2* ")\""
    | "q\"<" DelimitedStringNesting3* ">\""
    | "q\"{" DelimitedStringNesting4* "}\""
    | "q\"" @store DelimitedStringStartCharacter DelimitedStringCharacter* @compareTrue [^] "\""
    ;
fragment DelimitedStringNesting1
    = "[" DelimitedStringNesting1* "]" @recursiveLexer
    | [^\[\]]
    ;
fragment DelimitedStringNesting2
    = "(" DelimitedStringNesting2* ")" @recursiveLexer
    | [^()]
    ;
fragment DelimitedStringNesting3
    = "<" DelimitedStringNesting3* ">" @recursiveLexer
    | [^<>]
    ;
fragment DelimitedStringNesting4
    = "{" DelimitedStringNesting4* "}" @recursiveLexer
    | [^{}]
    ;
fragment DelimitedStringStartCharacter
    = [^<>(){}\[\] \t\n\r] - IdentifierStart
    ;
fragment DelimitedStringCharacter
    = @compareFalse [^]
    ;
fragment DelimitedStringLine
    = @compareFalse Identifier [^\n]* "\n"
    | [^\n] - IdentifierStart [^\n]* "\n"
    | "\n"
    ;
TokenString
    = "q{" Tokens "}"
    ;
fragment StringPostfix
    = "c"
    | "w"
    | "d"
    ;
fragment EscapeSequence
    = "\\\'"
    | "\\\""
    | "\\?"
    | "\\\\"
    | "\\0"
    | "\\a"
    | "\\b"
    | "\\f"
    | "\\n"
    | "\\r"
    | "\\t"
    | "\\v"
    | "\\x" HexDigit HexDigit
    | "\\" OctalDigit
    | "\\" OctalDigit OctalDigit
    | "\\" OctalDigit OctalDigit OctalDigit
    | "\\u" HexDigit HexDigit HexDigit HexDigit
    | "\\U" HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit
    | "\\" NamedCharacterEntity
    ;
token CharacterLiteral
    = "\'" SingleQuotedCharacter "\'"
    ;
fragment SingleQuotedCharacter
    = [^\'\\]
    | EscapeSequence
    ;
token IntegerLiteral
    = Integer
    | Integer IntegerSuffix
    ;
fragment Integer
    = DecimalInteger
    | BinaryInteger
    | HexadecimalInteger
    | OctalInteger
    ;
fragment IntegerSuffix
    = "L"
    | "u"
    | "U"
    | "Lu"
    | "LU"
    | "uL"
    | "UL"
    ;
fragment DecimalInteger
    = "0" Underscores?
    | NonZeroDigit
    | NonZeroDigit DecimalDigitsUS
    ;
fragment Underscores
    = "_"
    | Underscores "_"
    ;
fragment BinaryInteger
    = BinPrefix BinaryDigitsNoSingleUS
    ;
fragment BinPrefix
    = "0b"
    | "0B"
    ;
fragment HexadecimalInteger
    = HexPrefix HexDigitsNoSingleUS
    ;
fragment NonZeroDigit
    = "1"
    | "2"
    | "3"
    | "4"
    | "5"
    | "6"
    | "7"
    | "8"
    | "9"
    ;
/*fragment DecimalDigits
    = DecimalDigit
    | DecimalDigit DecimalDigits
    ;*/
fragment DecimalDigitsUS
    = DecimalDigitUS
    | DecimalDigitUS DecimalDigitsUS
    ;
fragment DecimalDigitsNoSingleUS
    = DecimalDigitsUS? DecimalDigit DecimalDigitsUS?
    ;
fragment DecimalDigitsNoStartingUS
    = DecimalDigit
    | DecimalDigit DecimalDigitsUS
    ;
fragment DecimalDigit
    = "0"
    | NonZeroDigit
    ;
fragment DecimalDigitUS
    = DecimalDigit
    | "_"
    ;
fragment BinaryDigitsNoSingleUS
    = BinaryDigitsUS? BinaryDigit BinaryDigitsUS?
    ;
fragment BinaryDigitsUS
    = BinaryDigitUS
    | BinaryDigitUS BinaryDigitsUS
    ;
fragment BinaryDigit
    = "0"
    | "1"
    ;
fragment BinaryDigitUS
    = BinaryDigit
    | "_"
    ;
fragment OctalDigit
    = "0"
    | "1"
    | "2"
    | "3"
    | "4"
    | "5"
    | "6"
    | "7"
    ;
fragment OctalInteger
    = "0" OctalDigit
    | "0" "_"
    | OctalInteger "_"
    | OctalInteger OctalDigit
    ;
/*fragment HexDigits
    = HexDigit
    | HexDigit HexDigits
    ;*/
fragment HexDigitsUS
    = HexDigitUS
    | HexDigitUS HexDigitsUS
    ;
fragment HexDigitsNoSingleUS
    = HexDigitsUS? HexDigit HexDigitsUS?
    ;
fragment HexDigitsNoStartingUS
    = HexDigit
    | HexDigit HexDigitsUS
    ;
fragment HexDigit
    = DecimalDigit
    | HexLetter
    ;
fragment HexDigitUS
    = HexDigit
    | "_"
    ;
fragment HexLetter
    = "a"
    | "b"
    | "c"
    | "d"
    | "e"
    | "f"
    | "A"
    | "B"
    | "C"
    | "D"
    | "E"
    | "F"
    ;
token FloatLiteral
    = Float Suffix?
    | DecimalInteger FloatSuffix ImaginarySuffix?
    | DecimalInteger RealSuffix? ImaginarySuffix
    ;
fragment Float
    = DecimalFloat
    | HexFloat
    ;
fragment DecimalFloat
     // Exception from maximal munch algorithm:
     // * A .. embedded inside what looks like two floating point
     //   literals, as in 1..2, is interpreted as if the .. was separated
     //   by a space from the first integer.
     // * A 1.a is interpreted as the three tokens 1, ., and a, whereas
     //   1. a is interpreted as the two tokens 1. and a.
     // See https://dlang.org/spec/lex.html
    = LeadingDecimal "." !"." ![a-zA-Z_] !UniversalAlpha
    | LeadingDecimal "." DecimalDigitsNoStartingUS
    | LeadingDecimal "." DecimalDigitsNoStartingUS DecimalExponent
    | "." DecimalDigitsNoStartingUS DecimalExponent?
    | LeadingDecimal DecimalExponent
    ;
fragment DecimalExponent
    = DecimalExponentStart DecimalDigitsNoSingleUS
    ;
fragment DecimalExponentStart
    = "e"
    | "E"
    | "e+"
    | "E+"
    | "e-"
    | "E-"
    ;
fragment HexFloat
    = HexPrefix HexDigitsNoSingleUS "." HexDigitsNoStartingUS HexExponent
    | HexPrefix "." HexDigitsNoStartingUS HexExponent
    | HexPrefix HexDigitsNoSingleUS HexExponent
    ;
fragment HexPrefix
    = "0x"
    | "0X"
    ;
fragment HexExponent
    = HexExponentStart DecimalDigitsNoSingleUS
    ;
fragment HexExponentStart
    = "p"
    | "P"
    | "p+"
    | "P+"
    | "p-"
    | "P-"
    ;
fragment Suffix
    = FloatSuffix ImaginarySuffix?
    | RealSuffix ImaginarySuffix?
    | ImaginarySuffix
    ;
fragment FloatSuffix
    = "f"
    | "F"
    ;
fragment RealSuffix
    = "L"
    ;
fragment ImaginarySuffix // deprecated
    = "i"
    ;
fragment LeadingDecimal
    = DecimalInteger
    | "0" DecimalDigitsNoSingleUS
    ;
Keyword
    = "abstract"
    | "alias"
    | "align"
    | "asm"
    | "assert"
    | "auto"
//    | "body" // deprecated
    | "bool"
    | "break"
    | "byte"
    | "case"
    | "cast"
    | "catch"
    | "cdouble" // deprecated
    | "cent" // deprecated
    | "cfloat" // deprecated
    | "char"
    | "class"
    | "const"
    | "continue"
    | "creal" // deprecated
    | "dchar"
    | "debug"
    | "default"
    | "delegate"
    | "delete" // deprecated
    | "deprecated"
    | "do"
    | "double"
    | "else"
    | "enum"
    | "export"
    | "extern"
    | "false"
    | "final"
    | "finally"
    | "float"
    | "for"
    | "foreach"
    | "foreach_reverse"
    | "function"
    | "goto"
    | "idouble" // deprecated
    | "if"
    | "ifloat" // deprecated
    | "immutable"
    | "import"
    | "in"
    | "inout"
    | "int"
    | "interface"
    | "invariant"
    | "ireal" // deprecated
    | "is"
    | "lazy"
    | "long"
    | "macro" // reserved
    | "mixin"
    | "module"
    | "new"
    | "nothrow"
    | "null"
    | "out"
    | "override"
    | "package"
    | "pragma"
    | "private"
    | "protected"
    | "public"
    | "pure"
    | "real"
    | "ref"
    | "return"
    | "scope"
    | "shared"
    | "short"
    | "static"
    | "struct"
    | "super"
    | "switch"
    | "synchronized"
    | "template"
    | "this"
    | "throw"
    | "true"
    | "try"
    | "typeid"
    | "typeof"
    | "ubyte"
    | "ucent" // deprecated
    | "uint"
    | "ulong"
    | "union"
    | "unittest"
    | "ushort"
    | "version"
    | "void"
    | "wchar"
    | "while"
    | "with"
    | "__FILE__"
    | "__FILE_FULL_PATH__"
    | "__MODULE__"
    | "__LINE__"
    | "__FUNCTION__"
    | "__PRETTY_FUNCTION__"
    | "__gshared"
    | "__traits"
    | "__vector"
    | "__parameters"
    ;
token SpecialTokenSequence @ignoreToken
    = "#" " "? "line" WS? IntegerLiteral WS? Filespec? WS? EndOfLine
    | "#" " "? "line" WS? "__LINE__" WS? Filespec? WS? EndOfLine   // https://issues.dlang.org/show_bug.cgi?id=7524
    | "#!" [^\n\r]* EndOfLine
    ;
fragment Filespec
    = "\"" DoubleQuotedCharacters? "\""
    ;
fragment NamedCharacterEntity
    = "&" Identifier ";"
    ;
fragment Letter = [a-zA-Z];

fragment UniversalAlpha
    = [\u00AA\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u01F5\u01FA-\u0217\u0250-\u02A8\u1E00-\u1E9B\u1EA0-\u1EF9\u207F] // Latin
    // Greek
    | [\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03CE\u03D0-\u03D6]
    | [\u03DA\u03DC\u03DE\u03E0\u03E2-\u03F3\u1F00-\u1F15\u1F18-\u1F1D]
    | [\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D]
    | [\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FC2-\u1FC4\u1FC6-\u1FCC]
    | [\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC]
    // Cyrillic:
    | [\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E-\u0481\u0490-\u04C4]
    | [\u04C7-\u04C8\u04CB-\u04CC\u04D0-\u04EB\u04EE-\u04F5\u04F8-\u04F9]
    // Armenian:
    | [\u0531-\u0556\u0561-\u0587]
    // Hebrew:
    | [\u05B0-\u05B9]
    | [\u05F0-\u05F2]
    // Arabic:
    | [\u0621-\u063A\u0640-\u0652\u0670-\u06B7\u06BA-\u06BE\u06C0-\u06CE]
    | [\u06D0-\u06DC\u06E5-\u06E8\u06EA-\u06ED]
    // Devanagari:
    | [\u0901-\u0903\u0905-\u0939\u093E-\u094D\u0950-\u0952\u0958-\u0963]
    // Bengali:
    | [\u0981-\u0983\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0]
    | [\u09B2\u09B6-\u09B9\u09BE-\u09C4\u09C7-\u09C8\u09CB-\u09CD]
    | [\u09DC-\u09DD\u09DF-\u09E3\u09F0-\u09F1]
    // Gurmukhi:
    | [\u0A02\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30]
    | [\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A3E-\u0A42\u0A47-\u0A48]
    | [\u0A4B-\u0A4D\u0A59-\u0A5C\u0A5E\u0A74]
    // Gujarati:
    | [\u0A81-\u0A83\u0A85-\u0A8B\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8]
    | [\u0AAA-\u0AB0]
    | [\u0AB2-\u0AB3]
    | [\u0AB5-\u0AB9]
    | [\u0ABD-\u0AC5]
    | [\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0]
    // Oriya:
    | [\u0B01-\u0B03\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30]
    | [\u0B32-\u0B33\u0B36-\u0B39\u0B3E-\u0B43\u0B47-\u0B48\u0B4B-\u0B4D]
    | [\u0B5C-\u0B5D\u0B5F-\u0B61]
    // Tamil:
    | [\u0B82-\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A]
    | [\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB5]
    | [\u0BB7-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD]
    // Telugu:
    | [\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33]
    | [\u0C35-\u0C39\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C60-\u0C61]
    // Kannada:
    | [\u0C82-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3]
    | [\u0CB5-\u0CB9\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CDE]
    | [\u0CE0-\u0CE1]
    // Malayalam:
    | [\u0D02-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39]
    | [\u0D3E-\u0D43\u0D46-\u0D48\u0D4A-\u0D4D\u0D60-\u0D61]
    // Thai:
    | [\u0E01-\u0E3A\u0E40-\u0E5B]
    // Lao:
    | [\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97]
    | [\u0E99-\u0E9F]
    | [\u0EA1-\u0EA3]
    | [\u0EA5]
    | [\u0EA7]
    | [\u0EAA-\u0EAB]
    | [\u0EAD-\u0EAE\u0EB0-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6]
    | [\u0EC8-\u0ECD\u0EDC-\u0EDD]
    // Tibetan:
    | [\u0F00\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F69]
    | [\u0F71-\u0F84\u0F86-\u0F8B\u0F90-\u0F95\u0F97\u0F99-\u0FAD]
    | [\u0FB1-\u0FB7\u0FB9]
    // Georgian:
    | [\u10A0-\u10C5\u10D0-\u10F6]
    // Hiragana:
    | [\u3041-\u3093\u309B-\u309C]
    // Katakana:
    | [\u30A1-\u30F6\u30FB-\u30FC]
    // Bopomofo:
    | [\u3105-\u312C]
    // CJK Unified Ideographs:
    | [\u4E00-\u9FA5]
    // Hangul:
    | [\uAC00-\uD7A3]
    // Digits:
    | [\u0660-\u0669\u06F0-\u06F9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F]
    | [\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE7-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF]
    | [\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33]
    // Special characters:
    | [\u00B5\u00B7\u02B0-\u02B8\u02BB\u02BD-\u02C1\u02D0-\u02D1]
    | [\u02E0-\u02E4\u037A\u0559\u093D\u0B3D\u1FBE\u203F-\u2040\u2102]
    | [\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2131]
    | [\u2133-\u2138\u2160-\u2182\u3005-\u3007\u3021-\u3029]
    ;

Tokens @array
    = @empty
    | Tokens TokenNoBraces
    | Tokens TokenMatchingBraces
    ;
TokenMatchingBraces @array
    = "{" Tokens "}"
    ;


TokensMatchingAllParens @array
    = @empty
    | TokensMatchingAllParens TokenNoParens
    | TokensMatchingAllParens "(" TokensMatchingAllParens ")"
    | TokensMatchingAllParens "{" TokensMatchingAllParens "}"
    | TokensMatchingAllParens "[" TokensMatchingAllParens "]"
    ;

// Section lex.charset
fragment HexQuad
    = HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit
    ;
fragment UniversalCharacterName
    = "\\u" HexQuad
    | "\\U" HexQuad HexQuad
    ;

// Section lex.name
token Identifier @lowPrio
    = IdentifierNondigit
    | Identifier IdentifierNondigit
    | Identifier Digit
    ;
fragment IdentifierNondigit
    = Nondigit
    | UniversalCharacterName
    | [$]
    ;
fragment Nondigit
    = [a-zA-Z_]
    ;
fragment Digit
    = [0-9]
    ;

// Section lex.icon
fragment OctalDigit
    = [0-7]
    ;
fragment HexadecimalDigit
    = [0-9a-fA-F]
    ;

// Section lex.ccon
token CharacterLiteral
    = "'" CCharSequence "'"
    | "u" "'" CCharSequence "'"
    | "U" "'" CCharSequence "'"
    | "L" "'" CCharSequence "'"
    ;
fragment CCharSequence
    = CChar
    | CCharSequence CChar
    ;
fragment CChar
    /* any member of the source character set except
     * the single-quote ', backslash \, or new-line character */
    = [^'\\\n]
    | EscapeSequence
    | UniversalCharacterName
    ;
fragment EscapeSequence
    = SimpleEscapeSequence
    | OctalEscapeSequence
    | HexadecimalEscapeSequence
    | "\\" "\r"? "\n"
    ;
fragment SimpleEscapeSequence
    = "\\'"
    | "\\\""
    | "\\?"
    | "\\\\"
    | "\\a"
    | "\\b"
    | "\\f"
    | "\\n"
    | "\\r"
    | "\\t"
    | "\\v"
    ;
fragment OctalEscapeSequence
    = "\\" OctalDigit
    | "\\" OctalDigit OctalDigit
    | "\\" OctalDigit OctalDigit OctalDigit
    ;
fragment HexadecimalEscapeSequence
    = "\\x" HexadecimalDigit
    | HexadecimalEscapeSequence HexadecimalDigit
    ;

// Section lex.string
token StringLiteral @minimalMatch
    = EncodingPrefix? "\"" SCharSequence? "\""
    | EncodingPrefix? "R" RawString
    ;
fragment EncodingPrefix
    = "u8"
    | "u"
    | "U"
    | "L"
    ;
fragment SCharSequence
    = SChar
    | SCharSequence SChar
    ;
fragment SChar
    /* any member of the source character set except
     * the double-quote ", backslash \, or new-line character */
    = [^\"\\\n]
    | EscapeSequence
    | UniversalCharacterName
    ;
fragment RawString
    = "\"(" RCharSequence? ")\""
    | "\"" @store DCharSequence "(" RCharSequence? ")" @compareTrue DCharSequence "\""
    ;
fragment RCharSequence
    = RChar
    | RCharSequence RChar
    ;
fragment RChar
    /* any member of the source character set, except
     * a right parenthesis ) followed by the initial DCharSequence
     * (which may be empty) followed by a double quote ". */
    = [^]
    ;
fragment DCharSequence
    = DChar
    | DCharSequence DChar
    ;
fragment DChar
    /* any member of the basic source character set except:
     * space, the left parenthesis (, the right parenthesis ), the backslash \,
     * and the control characters representing horizontal tab,
     * vertical tab, form feed, and newline. */
    = [^ ()\\\t\f\r\n]
    ;

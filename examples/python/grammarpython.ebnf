File @start
    = Statements?
    ;
Interactive @start
    = StatementNewline
    ;
Eval @start
    = Expressions Newline*
    ;
FuncType @start
    = "(" TypeExpressions? ")" "->" Expression Newline*
    ;
Statements
    = Statement+
    ;
Statement @backtrack
    = CompoundStmt
    | SimpleStmts
    ;
StatementNewline @backtrack
    = CompoundStmt Newline
    | SimpleStmts
    | Newline
    | @empty
    ;
SimpleStmts @array
    = list(SimpleStmt, ";") ";"? Newline
    ;
SimpleStmt
    = <AssignmentOrStarExpression
    | ReturnStmt
    | ImportStmt
    | RaiseStmt
    | "pass"
    | DelStmt
    | YieldStmt
    | AssertStmt
    | "break"
    | "continue"
    | GlobalStmt
    | NonlocalStmt
    ;
AssignmentOrStarExpression @backtrack
    = <Assignment
    | StarExpressions
    | TypeAlias
    ;
CompoundStmt
    = FunctionDef
    | IfStmt
    | ClassDef
    | WithStmt
    | ForStmt
    | TryStmt
    | WhileStmt
    | <MatchStmt
    ;
Assignment
    //= Identifier ":" Expression {"=" AnnotatedRhs}?
    = AssignmentSingleLhs ":" Expression {"=" AnnotatedRhs}?
    | AssignmentRec
    | Primary Augassign AnnotatedRhs
    ;
AssignmentSingleLhs @directUnwrap
    = <SingleTargetParen
    | <Primary
    ;

AssignmentRec
    = StarTargets "=" AssignmentRhs
    ;
AssignmentRhs @backtrack
    = <AssignmentRec
    | <AnnotatedRhs
    ;

SingleTargetParen @directUnwrap
    //= "(" Primary ")"
    = <Group
    ;
AnnotatedRhs @directUnwrap
    = <YieldExpr
    | StarExpressions
    ;
Augassign
    = "+="
    | "-="
    | "*="
    | "@="
    | "/="
    | "%="
    | "&="
    | "|="
    | "^="
    | "<<="
    | ">>="
    | "**="
    | "//="
    ;
ReturnStmt
    = "return" StarExpressions?
    ;
RaiseStmt
    = "raise" Expression {"from" Expression}?
    | "raise"
    ;
GlobalStmt
    = "global" list(Identifier, ",")
    ;
NonlocalStmt
    = "nonlocal" list(Identifier, ",")
    ;
DelStmt
    = "del" DelTargets
    ;
YieldStmt
    = YieldExpr
    ;
AssertStmt
    = "assert" Expression {"," Expression}?
    ;
ImportStmt
    = <ImportName
    | <ImportFrom
    ;
ImportName
    = "import" DottedAsNames
    ;
ImportFrom
    = "from" {"."   | "..."}* DottedName "import" ImportFromTargets
    | "from" {"."   | "..."}+ "import" ImportFromTargets
    ;
ImportFromTargets
    = "(" ImportFromAsNames ","? ")"
    | ImportFromAsNames
    | "*"
    ;
ImportFromAsNames
    = list(ImportFromAsName, ",")
    ;
ImportFromAsName
    = Identifier {"as" Identifier}?
    ;
DottedAsNames
    = list(DottedAsName, ",")
    ;
DottedAsName
    = DottedName {"as" Identifier}?
    ;
DottedName
    = DottedName "." Identifier
    | Identifier
    ;
Block
    = Newline Indent Statements Dedent
    | SimpleStmts
    ;
Decorators
    = {"@" NamedExpression Newline}+
    ;
ClassDef
    = Decorators ClassDefRaw
    | <ClassDefRaw
    ;
ClassDefRaw
    = "class" Identifier TypeParams? {"(" Arguments? ")"}? ":" Block
    ;
FunctionDef
    = Decorators FunctionDefRaw
    | <FunctionDefRaw
    ;
FunctionDefRaw
    = "def" Identifier TypeParams? "(" Params? ")" {"->" Expression}? ":" Block
    | "async" "def" Identifier TypeParams? "(" Params? ")" {"->" Expression}? ":" Block
    ;
Params
    = Parameters
    ;
Parameters @array @regArray
    = SlashNoDefault listEnd(ParamNoDefault, ",")? listEnd(ParamWithDefault, ",")? CommaStarEtc? ","?
    | SlashWithDefault listEnd(ParamWithDefault, ",")? CommaStarEtc? ","?
    | list(ParamNoDefault, ",") listEnd(ParamWithDefault, ",")? CommaStarEtc? ","?
    | list(ParamWithDefault, ",") CommaStarEtc? ","?
    | StarEtc ","?
    ;
SlashNoDefault @array
    = list(ParamNoDefault, ",") "," Slash
    ;
SlashWithDefault @array
    = list(ParamNoDefault, ",") listEnd(ParamWithDefault, ",") "," Slash
    | ParamWithDefault listEnd(ParamWithDefault, ",")? "," Slash
    ;
Slash
    = "/"
    ;
CommaStarEtc @array
    = "," StarEtc
    ;
StarEtc @array
    = "*" ParamNoDefault listEnd(ParamMaybeDefault, ",")? CommaKwds?
    | "*" ParamNoDefaultStarAnnotation listEnd(ParamMaybeDefault, ",")? CommaKwds?
    | "*" "," list(ParamMaybeDefault, ",") CommaKwds?
    | Kwds
    ;
CommaKwds @array
    = "," Kwds
    ;
Kwds
    = "**" ParamNoDefault
    ;
ParamNoDefault @directUnwrap
    = <Param
    ;
ParamNoDefaultStarAnnotation @directUnwrap
    = <ParamStarAnnotation
    ;
ParamWithDefault
    = Param Default
    ;
ParamMaybeDefault @directUnwrap
    = <ParamNoDefault
    | <ParamWithDefault
    ;
Param @directUnwrap
    = Identifier
    | <ParamStarAnnotation
    ;
ParamStarAnnotation
    = Identifier StarAnnotation
    ;
StarAnnotation
    = ":" StarExpression
    ;
Default
    = "=" Expression
    ;
IfStmt
    = "if" NamedExpression ":" Block ElifStmt
    | "if" NamedExpression ":" Block ElseBlock?
    ;
ElifStmt
    = "elif" NamedExpression ":" Block ElifStmt
    | "elif" NamedExpression ":" Block ElseBlock?
    ;
ElseBlock
    = "else" ":" Block
    ;
WhileStmt
    = "while" NamedExpression ":" Block ElseBlock?
    ;
ForStmt
    = "for" StarTargets "in" StarExpressions ":" Block ElseBlock?
    | "async" "for" StarTargets "in" StarExpressions ":" Block ElseBlock?
    ;
WithStmt
    = "with" WithParam ":" Block
    | "async" "with" WithParam ":" Block
    ;
WithParam @backtrack
    = "(" list(WithItem, ",") ","? ")"
    | list(WithItem, ",")
    ;
WithItem
    = Expression "as" StarTarget
    | Expression
    ;
TryStmt
    = "try" ":" Block FinallyBlock
    | "try" ":" Block ExceptBlock+ ElseBlock? FinallyBlock?
    | "try" ":" Block ExceptStarBlock+ ElseBlock? FinallyBlock?
    ;
ExceptBlock
    = "except" Expression {"as" Identifier}? ":" Block
    | "except" ":" Block
    ;
ExceptStarBlock
    = "except" "*" Expression {"as" Identifier}? ":" Block
    ;
FinallyBlock
    = "finally" ":" Block
    ;
MatchStmt
    = Identifier>>"match" SubjectExpr ":" Newline Indent CaseBlock+ Dedent
    ;
SubjectExpr
    = StarNamedExpression "," StarNamedExpressions?
    | <NamedExpression
    ;
CaseBlock
    = Identifier>>"case" Patterns Guard? ":" Block
    ;
Guard
    = "if" NamedExpression
    ;
Patterns
    = OpenSequencePattern
    | <Pattern
    ;
Pattern
    = <AsPattern
    | <OrPattern
    ;
AsPattern
    = OrPattern "as" PatternCaptureTarget
    ;
OrPattern
    = list(ClosedPattern, "|")
    ;
ClosedPattern @directUnwrap
    = <LiteralPattern
    | <CapturePattern
//    | <WildcardPattern
    | <ValuePattern
    | <GroupPattern
    | <SequencePattern
    | <MappingPattern
    | <ClassPattern
    ;
LiteralPattern
    = SignedNumber
    | ComplexNumber
    | Strings
    | "None"
    | "True"
    | "False"
    ;
LiteralExpr
    = SignedNumber
    | <ComplexNumber
    | <Strings
    | "None"
    | "True"
    | "False"
    ;
ComplexNumber
    = SignedRealNumber "+" ImaginaryNumber
    | SignedRealNumber "-" ImaginaryNumber
    ;
SignedNumber
    = Number
    | "-" Number
    ;
SignedRealNumber
    = <RealNumber
    | "-" RealNumber
    ;
RealNumber
    = Number
    ;
ImaginaryNumber
    = Number
    ;
CapturePattern
    = PatternCaptureTarget
    ;
PatternCaptureTarget
    = Identifier
    ;
ValuePattern
    = Attr
    ;
Attr
    = NameOrAttr "." Identifier
    ;
NameOrAttr
    = <Attr
    | Identifier
    ;
GroupPattern
    = "(" Pattern ")"
    ;
SequencePattern
    = "[" MaybeSequencePattern? "]"
    | "(" OpenSequencePattern? ")"
    ;
OpenSequencePattern
    = MaybeStarPattern "," MaybeSequencePattern?
    ;
MaybeSequencePattern
    = list(MaybeStarPattern, ",") ","?
    ;
MaybeStarPattern
    = <StarPattern
    | <Pattern
    ;
StarPattern
    = "*" PatternCaptureTarget
    ;
MappingPattern
    = "{" "}"
    | "{" DoubleStarPattern ","? "}"
    | "{" ItemsPattern "," DoubleStarPattern ","? "}"
    | "{" ItemsPattern ","? "}"
    ;
ItemsPattern
    = list(KeyValuePattern, ",")
    ;
KeyValuePattern
    = {LiteralExpr   | Attr} ":" Pattern
    ;
DoubleStarPattern
    = "**" PatternCaptureTarget
    ;
ClassPattern
    = NameOrAttr "(" ")"
    | NameOrAttr "(" ClassPatternArr ")"
    ;
ClassPatternArr @array @regArray
    = PositionalPatterns ","?
    | KeywordPatterns ","?
    | PositionalPatterns "," KeywordPatterns ","?
    ;
PositionalPatterns @array @regArray
    = list(Pattern, ",")
    ;
KeywordPatterns @array @regArray
    = list(KeywordPattern, ",")
    ;
KeywordPattern
    = Identifier "=" Pattern
    ;
TypeAlias
    = Identifier>>"type" Identifier TypeParams? "=" Expression
    ;
TypeParams
    = "[" TypeParamSeq "]"
    ;
TypeParamSeq
    = list(TypeParam, ",") ","?
    ;
TypeParam
    = Identifier TypeParamBound?
    | "*" Identifier ":" Expression
    | "*" Identifier
    | "**" Identifier ":" Expression
    | "**" Identifier
    ;
TypeParamBound
    = ":" Expression
    ;
Expressions @directUnwrap
    = list(Expression, ",") ","?
    ;
Expression @directUnwrap
    = Disjunction "if" Disjunction "else" Expression
    | <Disjunction
    | <Lambdef
    ;
YieldExpr
    = "yield" "from" Expression
    | "yield" StarExpressions?
    ;
StarExpressions @array @regArray
    = list(StarExpression, ",") ","?
    ;
StarExpression @directUnwrap
    = "*" BitwiseOr
    | <Expression
    ;
StarNamedExpressions
    = list(StarNamedExpression, ",") ","?
    ;
StarNamedExpression @directUnwrap
    = "*" BitwiseOr
    | <NamedExpression
    ;
AssignmentExpression
    = Identifier ":=" Expression
    ;
NamedExpression @directUnwrap
    = <AssignmentExpression
    | <Expression
    ;
Disjunction @directUnwrap
    = Conjunction {"or" Conjunction}+
    | <Conjunction
    ;
Conjunction @directUnwrap
    = Inversion {"and" Inversion}+
    | <Inversion
    ;
Inversion @directUnwrap
    = "not" Inversion
    | <Comparison
    ;
Comparison @directUnwrap
    = BitwiseOr CompareOpBitwiseOrPair+
    | <BitwiseOr
    ;
CompareOpBitwiseOrPair @directUnwrap
    = <EqBitwiseOr
    | <NoteqBitwiseOr
    | <LteBitwiseOr
    | <LtBitwiseOr
    | <GteBitwiseOr
    | <GtBitwiseOr
    | <NotinBitwiseOr
    | <InBitwiseOr
    | <IsnotBitwiseOr
    | <IsBitwiseOr
    ;
EqBitwiseOr
    = "==" BitwiseOr
    ;
NoteqBitwiseOr
    = "!=" BitwiseOr
    ;
LteBitwiseOr
    = "<=" BitwiseOr
    ;
LtBitwiseOr
    = "<" BitwiseOr
    ;
GteBitwiseOr
    = ">=" BitwiseOr
    ;
GtBitwiseOr
    = ">" BitwiseOr
    ;
NotinBitwiseOr
    = "not" "in" BitwiseOr
    ;
InBitwiseOr
    = "in" BitwiseOr
    ;
IsnotBitwiseOr
    = "is" "not" BitwiseOr
    ;
IsBitwiseOr
    = "is" BitwiseOr
    ;
BitwiseOr @directUnwrap
    = BitwiseOr "|" BitwiseXor
    | <BitwiseXor
    ;
BitwiseXor @directUnwrap
    = BitwiseXor "^" BitwiseAnd
    | <BitwiseAnd
    ;
BitwiseAnd @directUnwrap
    = BitwiseAnd "&" ShiftExpr
    | <ShiftExpr
    ;
ShiftExpr @directUnwrap
    = ShiftExpr "<<" Sum
    | ShiftExpr ">>" Sum
    | <Sum
    ;
Sum @directUnwrap
    = Sum "+" Term
    | Sum "-" Term
    | <Term
    ;
Term @directUnwrap
    = Term "*" Factor
    | Term "/" Factor
    | Term "//" Factor
    | Term "%" Factor
    | Term "@" Factor
    | <Factor
    ;
Factor @directUnwrap
    = "+" Factor
    | "-" Factor
    | "~" Factor
    | <Power
    ;
Power @directUnwrap
    = AwaitPrimary "**" Factor
    | <AwaitPrimary
    ;
AwaitPrimary @directUnwrap
    = "await" Primary
    | <Primary
    ;
Primary @directUnwrap
    = Primary "." Identifier
    | Primary Genexp
    | Primary "(" Arguments? ")"
    | Primary "[" Slices "]"
    | <Atom
    ;
Slices @array @regArray
    = list(SliceOrStarredExpression, ",") ","?
    ;
SliceOrStarredExpression @directUnwrap
    = <Slice
    | <StarredExpression
    ;
Slice
    = Expression? ":" Expression? {":" Expression?}?
    | NamedExpression
    ;
Atom @directUnwrap
    = Identifier
    | "True"
    | "False"
    | "None"
    | Strings
    | Number
    | <Tuple
    | <Group
    | <Genexp
    | <List
    | <Listcomp
    | <Dict
    | <Set
    | <Dictcomp
    | <Setcomp
    | "..."
    ;
Group
    = "(" YieldOrNamedExpr ")"
    ;
YieldOrNamedExpr @directUnwrap
    = <YieldExpr
    | <NamedExpression
    ;
Lambdef
    = "lambda" LambdaParams? ":" @eager Expression
    ;
LambdaParams
    = <LambdaParameters
    ;
LambdaParameters @array @regArray
    = LambdaSlashNoDefault listEnd(LambdaParamNoDefault, ",")? listEnd(LambdaParamWithDefault, ",")? CommaLambdaStarEtc? ","?
    | LambdaSlashWithDefault listEnd(LambdaParamWithDefault, ",")? CommaLambdaStarEtc? ","?
    | list(LambdaParamNoDefault, ",") listEnd(LambdaParamWithDefault, ",")? CommaLambdaStarEtc? ","?
    | list(LambdaParamWithDefault, ",") CommaLambdaStarEtc? ","?
    | LambdaStarEtc ","?
    ;
LambdaSlashNoDefault @array @regArray
    = list(LambdaParamNoDefault, ",") "," LambdaSlash
    ;
LambdaSlashWithDefault @array @regArray
    = list(LambdaParamNoDefault, ",") listEnd(LambdaParamWithDefault, ",") "," LambdaSlash
    | LambdaParamWithDefault listEnd(LambdaParamWithDefault, ",")? "," LambdaSlash
    ;
LambdaSlash
    = "/"
    ;
CommaLambdaStarEtc @array @regArray
    = "," LambdaStarEtc
    ;
LambdaStarEtc @array @regArray
    = "*" LambdaParamNoDefault listEnd(LambdaParamMaybeDefault, ",")? CommaLambdaKwds?
    | "*" "," list(LambdaParamMaybeDefault, ",") CommaLambdaKwds?
    | LambdaKwds
    ;
CommaLambdaKwds @array @regArray
    = "," LambdaKwds
    ;
LambdaKwds
    = "**" LambdaParamNoDefault
    ;
LambdaParamNoDefault @directUnwrap
    = <LambdaParam
    ;
LambdaParamWithDefault
    = LambdaParam Default
    ;
LambdaParamMaybeDefault @directUnwrap
    = <LambdaParamNoDefault
    | <LambdaParamWithDefault
    ;
LambdaParam
    = Identifier
    ;
String
    = Stringliteral
    ;
Strings
    = String+
    ;
List
    = "[" StarNamedExpressions? "]"
    ;
Tuple
    = "(" {StarNamedExpression "," StarNamedExpressions?}? ")"
    ;
Set
    = "{" StarNamedExpressions "}"
    ;
Dict
    = "{" DoubleStarredKvpairs? "}"
    ;
DoubleStarredKvpairs
    = list(DoubleStarredKvpair, ",") ","?
    ;
DoubleStarredKvpair
    = "**" BitwiseOr
    | <Kvpair
    ;
Kvpair
    = Expression ":" Expression
    ;
ForIfClauses
    = ForIfClause+
    ;
ForIfClause
    = "async" "for" StarTargets "in" Disjunction {"if" Disjunction}*
    | "for" StarTargets "in" Disjunction {"if" Disjunction}*
    ;
Listcomp
    = "[" NamedExpression ForIfClauses "]"
    ;
Setcomp
    = "{" NamedExpression ForIfClauses "}"
    ;
Genexp
    = "(" {AssignmentExpression   | Expression} ForIfClauses ")"
    ;
Dictcomp
    = "{" Kvpair ForIfClauses "}"
    ;
Arguments
    = Args ","?
    ;
Args @array @regArray
    = list(Arg, ",")
    | list(Arg, ",") "," Kwargs
    | Kwargs
    ;
Arg @directUnwrap
    = <StarredExpression
    | <AssignmentExpression
    | <Expression
    ;
Kwargs @array @regArray
    = list(KwargOrStarred, ",") "," list(KwargOrDoubleStarred, ",")
    | list(KwargOrStarred, ",")
    | list(KwargOrDoubleStarred, ",")
    ;
StarredExpression
    = "*" Expression
    ;
Kwarg
    = Identifier "=" Expression
    ;
KwargOrStarred @directUnwrap
    = <Kwarg
    | <StarredExpression
    ;
KwargOrDoubleStarred @directUnwrap
    = <Kwarg
    | "**" Expression
    ;
StarTargets @array @regArray
    = list(StarTarget, ",") ","?
    ;
StarTarget @directUnwrap
    = "*" StarTarget
    | <Primary
    ;
DelTargets @array
    = list(Primary, ",") ","?
    ;
TypeExpressions
    = list(Expression, ",") "," "*" Expression "," "**" Expression
    | list(Expression, ",") "," "*" Expression
    | list(Expression, ",") "," "**" Expression
    | "*" Expression "," "**" Expression
    | "*" Expression
    | "**" Expression
    | list(Expression, ",")
    ;

token Indent;
token Dedent;

token Space @ignoreToken
    = [ \t]+
    ;

token Comment @ignoreToken
    = "#" [^\n]*
    ;

token Newline
    = "\n" | "\r" | "\r\n"
    ;

token LineJoining @ignoreToken
    = "\\" Newline
    ;

token Identifier @lowPrio
    = IdStart IdContinue*
    ;
Stringliteral
    = Shortstring
    | Longstring
    | Shortbytes
    | Longbytes
    ;
fragment Stringprefix
    = "r"
    | "u"
    | "R"
    | "U"
    | "f"
    | "F"
    | "fr"
    | "Fr"
    | "fR"
    | "FR"
    | "rf"
    | "rF"
    | "Rf"
    | "RF"
    ;
token Shortstring
    = Stringprefix? "'" {[^\\'] | Stringescapeseq}+ "'"
    | Stringprefix? "'" "'" !"'"
    | Stringprefix? "\"" {[^\\"] | Stringescapeseq}+ "\""
    | Stringprefix? "\""  "\"" !"\""
    ;
token Longstring @minimalMatch
    = Stringprefix? "'''" Longstringitem* "'''"
    | Stringprefix? "\"\"\"" Longstringitem* "\"\"\""
    ;
fragment Longstringitem
    = Longstringchar
    | Stringescapeseq
    ;
fragment Longstringchar
    = [^\\]
    ;
fragment Stringescapeseq
    = "\\" [^]
    ;

fragment Bytesprefix
    = "b"
    | "B"
    | "br"
    | "Br"
    | "bR"
    | "BR"
    | "rb"
    | "rB"
    | "Rb"
    | "RB"
    ;
token Shortbytes
    = Bytesprefix "'" {[\x00-\x7f] - [\\\n'] | Bytesescapeseq}* "'" !"'"
    | Bytesprefix "\"" {[\x00-\x7f] - [\\\n"] | Bytesescapeseq}* "\"" !"\""
    ;
token Longbytes @minimalMatch
    = Bytesprefix "'''" Longbytesitem* "'''"
    | Bytesprefix "\"\"\"" Longbytesitem* "\"\"\""
    ;
fragment Longbytesitem
    = Longbyteschar
    | Bytesescapeseq
    ;
fragment Longbyteschar
    = [\x00-\x7f] - [\\]
    ;
fragment Bytesescapeseq
    = "\\" [\x00-\x7f]
    ;

token Number
    = Integer
    | Floatnumber
    | Imagnumber
    ;

fragment Integer
    = Decinteger
    | Bininteger
    | Octinteger
    | Hexinteger
    ;
fragment Decinteger
    = Nonzerodigit {"_"? Digit}*
    | "0"+ {"_"? "0"}*
    ;
fragment Bininteger
    = "0" [bB] {"_"? Bindigit}+
    ;
fragment Octinteger
    = "0" [oO] {"_"? Octdigit}+
    ;
fragment Hexinteger
    = "0" [xX] {"_"? Hexdigit}+
    ;
fragment Nonzerodigit
    = [1-9]
    ;
fragment Digit
    = [0-9]
    ;
fragment Bindigit
    = [01]
    ;
fragment Octdigit
    = [0-7]
    ;
fragment Hexdigit
    = Digit
    | [a-f]
    | [A-F]
    ;
fragment Floatnumber
    = Pointfloat
    | Exponentfloat
    ;
fragment Pointfloat
    = Digitpart? Fraction
    | Digitpart "."
    ;
fragment Exponentfloat
    = {Digitpart | Pointfloat} Exponent
    ;
fragment Digitpart
    = Digit {"_"? Digit}*
    ;
fragment Fraction
    = "." Digitpart
    ;
fragment Exponent
    = [eE] [+\-]? Digitpart
    ;
fragment Imagnumber
    = {Floatnumber | Digitpart} [jJ]
    ;

list(e, s) @array = e | list(e, s) s e;
listEnd(e, s) @array = s e | listEnd(e, s) s e;

fragment IdStart
    = "_"
    // Uppercase_Letter
    | [A-ZÀ-ÖØ-Þ\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E]
    | [\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122]
    | [\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136]
    | [\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C]
    | [\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160]
    | [\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174]
    | [\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187]
    | [\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D]
    | [\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF]
    | [\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD]
    | [\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2]
    | [\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8]
    | [\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C]
    | [\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220]
    | [\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232]
    | [\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C]
    | [\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C]
    | [\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8]
    | [\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC]
    | [\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464]
    | [\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478]
    | [\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494]
    | [\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8]
    | [\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC]
    | [\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0]
    | [\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4]
    | [\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8]
    | [\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C]
    | [\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520]
    | [\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556]
    | [\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF]
    | [\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12]
    | [\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26]
    | [\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A]
    | [\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E]
    | [\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62]
    | [\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76]
    | [\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A]
    | [\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6]
    | [\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA]
    | [\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE]
    | [\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2]
    | [\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6]
    | [\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F]
    | [\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F]
    | [\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC]
    | [\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115]
    | [\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133]
    | [\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67]
    | [\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84]
    | [\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98]
    | [\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC]
    | [\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0]
    | [\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4]
    | [\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2]
    | [\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652]
    | [\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666]
    | [\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C]
    | [\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726]
    | [\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C]
    | [\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750]
    | [\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764]
    | [\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780]
    | [\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A]
    | [\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE]
    | [\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2]
    | [\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A]
    | [\U00010400-\U00010427\U000104B0-\U000104D3\U00010570-\U0001057A]
    | [\U0001057C-\U0001058A\U0001058C-\U00010592\U00010594\U00010595]
    | [\U00010C80-\U00010CB2\U000118A0-\U000118BF\U00016E40-\U00016E5F]
    | [\U0001D400-\U0001D419\U0001D434-\U0001D44D\U0001D468-\U0001D481]
    | [\U0001D49C\U0001D49E\U0001D49F\U0001D4A2\U0001D4A5\U0001D4A6]
    | [\U0001D4A9-\U0001D4AC\U0001D4AE-\U0001D4B5\U0001D4D0-\U0001D4E9]
    | [\U0001D504\U0001D505\U0001D507-\U0001D50A\U0001D50D-\U0001D514]
    | [\U0001D516-\U0001D51C\U0001D538\U0001D539\U0001D53B-\U0001D53E]
    | [\U0001D540-\U0001D544\U0001D546\U0001D54A-\U0001D550]
    | [\U0001D56C-\U0001D585\U0001D5A0-\U0001D5B9\U0001D5D4-\U0001D5ED]
    | [\U0001D608-\U0001D621\U0001D63C-\U0001D655\U0001D670-\U0001D689]
    | [\U0001D6A8-\U0001D6C0\U0001D6E2-\U0001D6FA\U0001D71C-\U0001D734]
    | [\U0001D756-\U0001D76E\U0001D790-\U0001D7A8\U0001D7CA]
    | [\U0001E900-\U0001E921]
    // Lowercase_Letter
    | [a-zµß-öø-ÿ\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F]
    | [\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123]
    | [\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135]
    | [\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146]
    | [\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159]
    | [\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D]
    | [\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183]
    | [\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1]
    | [\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6]
    | [\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2]
    | [\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5]
    | [\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB]
    | [\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F]
    | [\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223]
    | [\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C]
    | [\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293]
    | [\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE]
    | [\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3]
    | [\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8]
    | [\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B]
    | [\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F]
    | [\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B]
    | [\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF]
    | [\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4]
    | [\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7]
    | [\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB]
    | [\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF]
    | [\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513]
    | [\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527]
    | [\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF]
    | [\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77]
    | [\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F]
    | [\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23]
    | [\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37]
    | [\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B]
    | [\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F]
    | [\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73]
    | [\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87]
    | [\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1]
    | [\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5]
    | [\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9]
    | [\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD]
    | [\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1]
    | [\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15]
    | [\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57]
    | [\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97]
    | [\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4]
    | [\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4]
    | [\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139]
    | [\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61]
    | [\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B]
    | [\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93]
    | [\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7]
    | [\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB]
    | [\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF]
    | [\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1]
    | [\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641]
    | [\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655]
    | [\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669]
    | [\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F]
    | [\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729]
    | [\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D]
    | [\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751]
    | [\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765]
    | [\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F]
    | [\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797]
    | [\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF]
    | [\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA]
    | [\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A]
    | [\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17]
    | [\uFF41-\uFF5A\U00010428-\U0001044F\U000104D8-\U000104FB]
    | [\U00010597-\U000105A1\U000105A3-\U000105B1\U000105B3-\U000105B9]
    | [\U000105BB\U000105BC\U00010CC0-\U00010CF2\U000118C0-\U000118DF]
    | [\U00016E60-\U00016E7F\U0001D41A-\U0001D433\U0001D44E-\U0001D454]
    | [\U0001D456-\U0001D467\U0001D482-\U0001D49B\U0001D4B6-\U0001D4B9]
    | [\U0001D4BB\U0001D4BD-\U0001D4C3\U0001D4C5-\U0001D4CF]
    | [\U0001D4EA-\U0001D503\U0001D51E-\U0001D537\U0001D552-\U0001D56B]
    | [\U0001D586-\U0001D59F\U0001D5BA-\U0001D5D3\U0001D5EE-\U0001D607]
    | [\U0001D622-\U0001D63B\U0001D656-\U0001D66F\U0001D68A-\U0001D6A5]
    | [\U0001D6C2-\U0001D6DA\U0001D6DC-\U0001D6E1\U0001D6FC-\U0001D714]
    | [\U0001D716-\U0001D71B\U0001D736-\U0001D74E\U0001D750-\U0001D755]
    | [\U0001D770-\U0001D788\U0001D78A-\U0001D78F\U0001D7AA-\U0001D7C2]
    | [\U0001D7C4-\U0001D7C9\U0001D7CB\U0001DF00-\U0001DF09]
    | [\U0001DF0B-\U0001DF1E\U0001DF25-\U0001DF2A\U0001E922-\U0001E943]
    // Titlecase_Letter
    | [\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF]
    | [\u1FBC\u1FCC\u1FFC]
    // Modifier_Letter
    | [\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A]
    | [\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828]
    | [\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D]
    | [\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C]
    | [\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E]
    | [\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D]
    | [\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6]
    | [\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F]
    | [\U00010780-\U00010785\U00010787-\U000107B0\U000107B2-\U000107BA]
    | [\U00016B40-\U00016B43\U00016F93-\U00016F9F\U00016FE0\U00016FE1]
    | [\U00016FE3\U0001AFF0-\U0001AFF3\U0001AFF5-\U0001AFFB]
    | [\U0001AFFD\U0001AFFE\U0001E030-\U0001E06D\U0001E137-\U0001E13D]
    | [\U0001E4EB\U0001E94B]
    // Other_Letter
    | [ªº\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2]
    | [\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5]
    | [\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5]
    | [\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A]
    | [\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950]
    | [\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8]
    | [\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD]
    | [\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10]
    | [\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39]
    | [\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91]
    | [\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0]
    | [\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28]
    | [\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D]
    | [\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95]
    | [\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA]
    | [\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28]
    | [\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80]
    | [\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3]
    | [\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2]
    | [\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56]
    | [\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1]
    | [\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33]
    | [\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5]
    | [\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00]
    | [\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F]
    | [\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070]
    | [\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258]
    | [\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0]
    | [\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6]
    | [\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F]
    | [\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA]
    | [\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751]
    | [\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842]
    | [\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5]
    | [\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB]
    | [\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33]
    | [\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23]
    | [\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6]
    | [\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6]
    | [\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6]
    | [\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096]
    | [\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF]
    | [\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C]
    | [\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E]
    | [\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A]
    | [\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB]
    | [\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2]
    | [\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28]
    | [\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A]
    | [\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2]
    | [\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E]
    | [\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2]
    | [\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D]
    | [\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E]
    | [\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F]
    | [\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC]
    | [\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7]
    | [\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\U00010000-\U0001000B]
    | [\U0001000D-\U00010026\U00010028-\U0001003A\U0001003C\U0001003D]
    | [\U0001003F-\U0001004D\U00010050-\U0001005D\U00010080-\U000100FA]
    | [\U00010280-\U0001029C\U000102A0-\U000102D0\U00010300-\U0001031F]
    | [\U0001032D-\U00010340\U00010342-\U00010349\U00010350-\U00010375]
    | [\U00010380-\U0001039D\U000103A0-\U000103C3\U000103C8-\U000103CF]
    | [\U00010450-\U0001049D\U00010500-\U00010527\U00010530-\U00010563]
    | [\U00010600-\U00010736\U00010740-\U00010755\U00010760-\U00010767]
    | [\U00010800-\U00010805\U00010808\U0001080A-\U00010835]
    | [\U00010837\U00010838\U0001083C\U0001083F-\U00010855]
    | [\U00010860-\U00010876\U00010880-\U0001089E\U000108E0-\U000108F2]
    | [\U000108F4\U000108F5\U00010900-\U00010915\U00010920-\U00010939]
    | [\U00010980-\U000109B7\U000109BE\U000109BF\U00010A00]
    | [\U00010A10-\U00010A13\U00010A15-\U00010A17\U00010A19-\U00010A35]
    | [\U00010A60-\U00010A7C\U00010A80-\U00010A9C\U00010AC0-\U00010AC7]
    | [\U00010AC9-\U00010AE4\U00010B00-\U00010B35\U00010B40-\U00010B55]
    | [\U00010B60-\U00010B72\U00010B80-\U00010B91\U00010C00-\U00010C48]
    | [\U00010D00-\U00010D23\U00010E80-\U00010EA9\U00010EB0\U00010EB1]
    | [\U00010F00-\U00010F1C\U00010F27\U00010F30-\U00010F45]
    | [\U00010F70-\U00010F81\U00010FB0-\U00010FC4\U00010FE0-\U00010FF6]
    | [\U00011003-\U00011037\U00011071\U00011072\U00011075]
    | [\U00011083-\U000110AF\U000110D0-\U000110E8\U00011103-\U00011126]
    | [\U00011144\U00011147\U00011150-\U00011172\U00011176]
    | [\U00011183-\U000111B2\U000111C1-\U000111C4\U000111DA\U000111DC]
    | [\U00011200-\U00011211\U00011213-\U0001122B\U0001123F\U00011240]
    | [\U00011280-\U00011286\U00011288\U0001128A-\U0001128D]
    | [\U0001128F-\U0001129D\U0001129F-\U000112A8\U000112B0-\U000112DE]
    | [\U00011305-\U0001130C\U0001130F\U00011310\U00011313-\U00011328]
    | [\U0001132A-\U00011330\U00011332\U00011333\U00011335-\U00011339]
    | [\U0001133D\U00011350\U0001135D-\U00011361\U00011400-\U00011434]
    | [\U00011447-\U0001144A\U0001145F-\U00011461\U00011480-\U000114AF]
    | [\U000114C4\U000114C5\U000114C7\U00011580-\U000115AE]
    | [\U000115D8-\U000115DB\U00011600-\U0001162F\U00011644]
    | [\U00011680-\U000116AA\U000116B8\U00011700-\U0001171A]
    | [\U00011740-\U00011746\U00011800-\U0001182B\U000118FF-\U00011906]
    | [\U00011909\U0001190C-\U00011913\U00011915\U00011916]
    | [\U00011918-\U0001192F\U0001193F\U00011941\U000119A0-\U000119A7]
    | [\U000119AA-\U000119D0\U000119E1\U000119E3\U00011A00]
    | [\U00011A0B-\U00011A32\U00011A3A\U00011A50\U00011A5C-\U00011A89]
    | [\U00011A9D\U00011AB0-\U00011AF8\U00011C00-\U00011C08]
    | [\U00011C0A-\U00011C2E\U00011C40\U00011C72-\U00011C8F]
    | [\U00011D00-\U00011D06\U00011D08\U00011D09\U00011D0B-\U00011D30]
    | [\U00011D46\U00011D60-\U00011D65\U00011D67\U00011D68]
    | [\U00011D6A-\U00011D89\U00011D98\U00011EE0-\U00011EF2\U00011F02]
    | [\U00011F04-\U00011F10\U00011F12-\U00011F33\U00011FB0]
    | [\U00012000-\U00012399\U00012480-\U00012543\U00012F90-\U00012FF0]
    | [\U00013000-\U0001342F\U00013441-\U00013446\U00014400-\U00014646]
    | [\U00016800-\U00016A38\U00016A40-\U00016A5E\U00016A70-\U00016ABE]
    | [\U00016AD0-\U00016AED\U00016B00-\U00016B2F\U00016B63-\U00016B77]
    | [\U00016B7D-\U00016B8F\U00016F00-\U00016F4A\U00016F50]
    | [\U00017000-\U000187F7\U00018800-\U00018CD5\U00018D00-\U00018D08]
    | [\U0001B000-\U0001B122\U0001B132\U0001B150-\U0001B152\U0001B155]
    | [\U0001B164-\U0001B167\U0001B170-\U0001B2FB\U0001BC00-\U0001BC6A]
    | [\U0001BC70-\U0001BC7C\U0001BC80-\U0001BC88\U0001BC90-\U0001BC99]
    | [\U0001DF0A\U0001E100-\U0001E12C\U0001E14E\U0001E290-\U0001E2AD]
    | [\U0001E2C0-\U0001E2EB\U0001E4D0-\U0001E4EA\U0001E7E0-\U0001E7E6]
    | [\U0001E7E8-\U0001E7EB\U0001E7ED\U0001E7EE\U0001E7F0-\U0001E7FE]
    | [\U0001E800-\U0001E8C4\U0001EE00-\U0001EE03\U0001EE05-\U0001EE1F]
    | [\U0001EE21\U0001EE22\U0001EE24\U0001EE27\U0001EE29-\U0001EE32]
    | [\U0001EE34-\U0001EE37\U0001EE39\U0001EE3B\U0001EE42\U0001EE47]
    | [\U0001EE49\U0001EE4B\U0001EE4D-\U0001EE4F\U0001EE51\U0001EE52]
    | [\U0001EE54\U0001EE57\U0001EE59\U0001EE5B\U0001EE5D\U0001EE5F]
    | [\U0001EE61\U0001EE62\U0001EE64\U0001EE67-\U0001EE6A]
    | [\U0001EE6C-\U0001EE72\U0001EE74-\U0001EE77\U0001EE79-\U0001EE7C]
    | [\U0001EE7E\U0001EE80-\U0001EE89\U0001EE8B-\U0001EE9B]
    | [\U0001EEA1-\U0001EEA3\U0001EEA5-\U0001EEA9\U0001EEAB-\U0001EEBB]
    | [\U00020000-\U0002A6DF\U0002A700-\U0002B739\U0002B740-\U0002B81D]
    | [\U0002B820-\U0002CEA1\U0002CEB0-\U0002EBE0\U0002F800-\U0002FA1D]
    | [\U00030000-\U0003134A\U00031350-\U000323AF]
    // Letter_Number
    | [\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029]
    | [\u3038-\u303A\uA6E6-\uA6EF\U00010140-\U00010174\U00010341]
    | [\U0001034A\U000103D1-\U000103D5\U00012400-\U0001246E]
    // Other_ID_Start
    | [\u1885\u1886\u2118\u212E\u309B\u309C]
    ;
fragment IdContinue
    = IdStart
    // Nonspacing_Mark
    | [\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2]
    | [\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC]
    | [\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A]
    | [\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823]
    | [\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F]
    | [\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D]
    | [\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD]
    | [\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48]
    | [\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC]
    | [\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01]
    | [\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82]
    | [\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48]
    | [\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6]
    | [\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44]
    | [\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31]
    | [\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE]
    | [\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84]
    | [\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030]
    | [\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060]
    | [\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F]
    | [\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5]
    | [\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F]
    | [\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B]
    | [\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C]
    | [\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34]
    | [\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5]
    | [\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1]
    | [\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8]
    | [\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1]
    | [\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D]
    | [\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802]
    | [\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF]
    | [\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9]
    | [\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43]
    | [\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1]
    | [\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F]
    | [\uFE20-\uFE2F\U000101FD\U000102E0\U00010376-\U0001037A]
    | [\U00010A01-\U00010A03\U00010A05\U00010A06\U00010A0C-\U00010A0F]
    | [\U00010A38-\U00010A3A\U00010A3F\U00010AE5\U00010AE6]
    | [\U00010D24-\U00010D27\U00010EAB\U00010EAC\U00010EFD-\U00010EFF]
    | [\U00010F46-\U00010F50\U00010F82-\U00010F85\U00011001]
    | [\U00011038-\U00011046\U00011070\U00011073\U00011074]
    | [\U0001107F-\U00011081\U000110B3-\U000110B6\U000110B9\U000110BA]
    | [\U000110C2\U00011100-\U00011102\U00011127-\U0001112B]
    | [\U0001112D-\U00011134\U00011173\U00011180\U00011181]
    | [\U000111B6-\U000111BE\U000111C9-\U000111CC\U000111CF]
    | [\U0001122F-\U00011231\U00011234\U00011236\U00011237\U0001123E]
    | [\U00011241\U000112DF\U000112E3-\U000112EA\U00011300\U00011301]
    | [\U0001133B\U0001133C\U00011340\U00011366-\U0001136C]
    | [\U00011370-\U00011374\U00011438-\U0001143F\U00011442-\U00011444]
    | [\U00011446\U0001145E\U000114B3-\U000114B8\U000114BA]
    | [\U000114BF\U000114C0\U000114C2\U000114C3\U000115B2-\U000115B5]
    | [\U000115BC\U000115BD\U000115BF\U000115C0\U000115DC\U000115DD]
    | [\U00011633-\U0001163A\U0001163D\U0001163F\U00011640\U000116AB]
    | [\U000116AD\U000116B0-\U000116B5\U000116B7\U0001171D-\U0001171F]
    | [\U00011722-\U00011725\U00011727-\U0001172B\U0001182F-\U00011837]
    | [\U00011839\U0001183A\U0001193B\U0001193C\U0001193E\U00011943]
    | [\U000119D4-\U000119D7\U000119DA\U000119DB\U000119E0]
    | [\U00011A01-\U00011A0A\U00011A33-\U00011A38\U00011A3B-\U00011A3E]
    | [\U00011A47\U00011A51-\U00011A56\U00011A59-\U00011A5B]
    | [\U00011A8A-\U00011A96\U00011A98\U00011A99\U00011C30-\U00011C36]
    | [\U00011C38-\U00011C3D\U00011C3F\U00011C92-\U00011CA7]
    | [\U00011CAA-\U00011CB0\U00011CB2\U00011CB3\U00011CB5\U00011CB6]
    | [\U00011D31-\U00011D36\U00011D3A\U00011D3C\U00011D3D]
    | [\U00011D3F-\U00011D45\U00011D47\U00011D90\U00011D91\U00011D95]
    | [\U00011D97\U00011EF3\U00011EF4\U00011F00\U00011F01]
    | [\U00011F36-\U00011F3A\U00011F40\U00011F42\U00013440]
    | [\U00013447-\U00013455\U00016AF0-\U00016AF4\U00016B30-\U00016B36]
    | [\U00016F4F\U00016F8F-\U00016F92\U00016FE4\U0001BC9D\U0001BC9E]
    | [\U0001CF00-\U0001CF2D\U0001CF30-\U0001CF46\U0001D167-\U0001D169]
    | [\U0001D17B-\U0001D182\U0001D185-\U0001D18B\U0001D1AA-\U0001D1AD]
    | [\U0001D242-\U0001D244\U0001DA00-\U0001DA36\U0001DA3B-\U0001DA6C]
    | [\U0001DA75\U0001DA84\U0001DA9B-\U0001DA9F\U0001DAA1-\U0001DAAF]
    | [\U0001E000-\U0001E006\U0001E008-\U0001E018\U0001E01B-\U0001E021]
    | [\U0001E023\U0001E024\U0001E026-\U0001E02A\U0001E08F]
    | [\U0001E130-\U0001E136\U0001E2AE\U0001E2EC-\U0001E2EF]
    | [\U0001E4EC-\U0001E4EF\U0001E8D0-\U0001E8D6\U0001E944-\U0001E94A]
    | [\U000E0100-\U000E01EF]
    // Spacing_Mark
    | [\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983]
    | [\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40]
    | [\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40]
    | [\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2]
    | [\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44]
    | [\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB]
    | [\u0CD5\u0CD6\u0CF3\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48]
    | [\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF]
    | [\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038]
    | [\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084]
    | [\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5]
    | [\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938]
    | [\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04]
    | [\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7]
    | [\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B]
    | [\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827]
    | [\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5]
    | [\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B]
    | [\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7]
    | [\uABE9\uABEA\uABEC\U00011000\U00011002\U00011082]
    | [\U000110B0-\U000110B2\U000110B7\U000110B8\U0001112C]
    | [\U00011145\U00011146\U00011182\U000111B3-\U000111B5]
    | [\U000111BF\U000111C0\U000111CE\U0001122C-\U0001122E]
    | [\U00011232\U00011233\U00011235\U000112E0-\U000112E2]
    | [\U00011302\U00011303\U0001133E\U0001133F\U00011341-\U00011344]
    | [\U00011347\U00011348\U0001134B-\U0001134D\U00011357]
    | [\U00011362\U00011363\U00011435-\U00011437\U00011440\U00011441]
    | [\U00011445\U000114B0-\U000114B2\U000114B9\U000114BB-\U000114BE]
    | [\U000114C1\U000115AF-\U000115B1\U000115B8-\U000115BB\U000115BE]
    | [\U00011630-\U00011632\U0001163B\U0001163C\U0001163E\U000116AC]
    | [\U000116AE\U000116AF\U000116B6\U00011720\U00011721\U00011726]
    | [\U0001182C-\U0001182E\U00011838\U00011930-\U00011935]
    | [\U00011937\U00011938\U0001193D\U00011940\U00011942]
    | [\U000119D1-\U000119D3\U000119DC-\U000119DF\U000119E4\U00011A39]
    | [\U00011A57\U00011A58\U00011A97\U00011C2F\U00011C3E\U00011CA9]
    | [\U00011CB1\U00011CB4\U00011D8A-\U00011D8E\U00011D93\U00011D94]
    | [\U00011D96\U00011EF5\U00011EF6\U00011F03\U00011F34\U00011F35]
    | [\U00011F3E\U00011F3F\U00011F41\U00016F51-\U00016F87]
    | [\U00016FF0\U00016FF1\U0001D165\U0001D166\U0001D16D-\U0001D172]
    // Decimal_Number
    | [0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F]
    | [\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F]
    | [\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F]
    | [\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29]
    | [\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819]
    | [\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99]
    | [\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59]
    | [\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9]
    | [\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]
    | [\U000104A0-\U000104A9\U00010D30-\U00010D39\U00011066-\U0001106F]
    | [\U000110F0-\U000110F9\U00011136-\U0001113F\U000111D0-\U000111D9]
    | [\U000112F0-\U000112F9\U00011450-\U00011459\U000114D0-\U000114D9]
    | [\U00011650-\U00011659\U000116C0-\U000116C9\U00011730-\U00011739]
    | [\U000118E0-\U000118E9\U00011950-\U00011959\U00011C50-\U00011C59]
    | [\U00011D50-\U00011D59\U00011DA0-\U00011DA9\U00011F50-\U00011F59]
    | [\U00016A60-\U00016A69\U00016AC0-\U00016AC9\U00016B50-\U00016B59]
    | [\U0001D7CE-\U0001D7FF\U0001E140-\U0001E149\U0001E2F0-\U0001E2F9]
    | [\U0001E4F0-\U0001E4F9\U0001E950-\U0001E959\U0001FBF0-\U0001FBF9]
    // Connector_Punctuation
    | [_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]
    // Other_ID_Continue
    | [·\u0387\u1369-\u1371\u19DA]
    ;

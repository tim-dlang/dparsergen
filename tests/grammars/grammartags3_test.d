import testhelpers;

unittest
{
    import P = grammartags3;

    alias L = imported!"grammartags3_lexer".Lexer!LocationBytes;
    alias test = testOnce!(P, L);

    test("id id(id);", q{Merged:Declaration(SimpleDeclaration(DeclSpecifierSeq("id"), Merged:InitDeclaratorList(InitDeclarator(NoptrDeclarator(DeclaratorId("id")), Initializer("(", InitializerClause(AssignmentExpression("id")), ")")), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")"))), ";"), FunctionDefinition(FunctionDefinitionHead(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")"))), ";"))});
    test("id id((id));", q{SimpleDeclaration(DeclSpecifierSeq("id"), InitDeclarator(NoptrDeclarator(DeclaratorId("id")), Initializer("(", InitializerClause(AssignmentExpression("(", AssignmentExpression("id"), ")")), ")")), ";")});
    test("id id;", q{SimpleDeclaration(DeclSpecifierSeq("id"), NoptrDeclarator(DeclaratorId("id")), ";")});
    test("id id, id;", q{SimpleDeclaration(DeclSpecifierSeq("id"), NoptrDeclarator(DeclaratorId("id")), ",", NoptrDeclarator(DeclaratorId("id")), ";")});
    test("id *id;", q{SimpleDeclaration(DeclSpecifierSeq("id"), PtrDeclarator("*", NoptrDeclarator(DeclaratorId("id"))), ";")});
    test("id id(id id);", q{Merged:Declaration(SimpleDeclaration(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclaration(DeclSpecifierSeq("id"), NoptrDeclarator(DeclaratorId("id"))), ")")), ";"), FunctionDefinition(FunctionDefinitionHead(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclaration(DeclSpecifierSeq("id"), NoptrDeclarator(DeclaratorId("id"))), ")"))), ";"))});
    test("id id(id *id);", q{Merged:Declaration(SimpleDeclaration(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclaration(DeclSpecifierSeq("id"), PtrDeclarator("*", NoptrDeclarator(DeclaratorId("id")))), ")")), ";"), FunctionDefinition(FunctionDefinitionHead(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclaration(DeclSpecifierSeq("id"), PtrDeclarator("*", NoptrDeclarator(DeclaratorId("id")))), ")"))), ";"))});
    test("id id(id *);", q{Merged:Declaration(SimpleDeclaration(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), AbstractDeclaratorOpt(null, "*")), ")")), ";"), FunctionDefinition(FunctionDefinitionHead(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), AbstractDeclaratorOpt(null, "*")), ")"))), ";"))});
    test("id id(id id, id);", q{Merged:Declaration(SimpleDeclaration(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclaration(DeclSpecifierSeq("id"), NoptrDeclarator(DeclaratorId("id"))), ",", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")")), ";"), FunctionDefinition(FunctionDefinitionHead(DeclSpecifierSeq("id"), FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclaration(DeclSpecifierSeq("id"), NoptrDeclarator(DeclaratorId("id"))), ",", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")"))), ";"))});
    test("id *id(id);", q{Merged:Declaration(SimpleDeclaration(DeclSpecifierSeq("id"), Merged:InitDeclaratorList(InitDeclarator(PtrDeclarator("*", NoptrDeclarator(DeclaratorId("id"))), Initializer("(", InitializerClause(AssignmentExpression("id")), ")")), PtrDeclarator("*", FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")")))), ";"), FunctionDefinition(FunctionDefinitionHead(DeclSpecifierSeq("id"), PtrDeclarator("*", FunctionDeclarator(NoptrDeclarator(DeclaratorId("id")), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")")))), ";"))});
    test("id (*id)(id);", q{SimpleDeclaration(DeclSpecifierSeq("id"), Merged:InitDeclaratorList(InitDeclarator(NoptrDeclarator("(", PtrDeclarator("*", NoptrDeclarator(DeclaratorId("id"))), ")"), Initializer("(", InitializerClause(AssignmentExpression("id")), ")")), FunctionDeclarator(NoptrDeclarator("(", PtrDeclarator("*", NoptrDeclarator(DeclaratorId("id"))), ")"), ParametersAndQualifiers("(", ParameterDeclarationAbstract(DeclSpecifierSeq("id"), null), ")"))), ";")});
}
